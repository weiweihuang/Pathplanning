/* Auto-generated by genmsg_cpp for file /home/weiweihuang/groovy_workspace/Pathplanning/interactive_walk_planner_new/msg/foot_sequence.msg */
#ifndef INTERACTIVE_WALK_PLANNER_NEW_MESSAGE_FOOT_SEQUENCE_H
#define INTERACTIVE_WALK_PLANNER_NEW_MESSAGE_FOOT_SEQUENCE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace interactive_walk_planner_new
{
template <class ContainerAllocator>
struct foot_sequence_ {
  typedef foot_sequence_<ContainerAllocator> Type;

  foot_sequence_()
  : header()
  , x()
  , y()
  , theta()
  , s()
  , height()
  , normal_x()
  , normal_y()
  , normal_z()
  {
    x.assign(0.0);
    y.assign(0.0);
    theta.assign(0.0);
    s.assign(0.0);
    height.assign(0.0);
    normal_x.assign(0.0);
    normal_y.assign(0.0);
    normal_z.assign(0.0);
  }

  foot_sequence_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , x()
  , y()
  , theta()
  , s()
  , height()
  , normal_x()
  , normal_y()
  , normal_z()
  {
    x.assign(0.0);
    y.assign(0.0);
    theta.assign(0.0);
    s.assign(0.0);
    height.assign(0.0);
    normal_x.assign(0.0);
    normal_y.assign(0.0);
    normal_z.assign(0.0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef boost::array<float, 50>  _x_type;
  boost::array<float, 50>  x;

  typedef boost::array<float, 50>  _y_type;
  boost::array<float, 50>  y;

  typedef boost::array<float, 50>  _theta_type;
  boost::array<float, 50>  theta;

  typedef boost::array<float, 50>  _s_type;
  boost::array<float, 50>  s;

  typedef boost::array<float, 50>  _height_type;
  boost::array<float, 50>  height;

  typedef boost::array<float, 50>  _normal_x_type;
  boost::array<float, 50>  normal_x;

  typedef boost::array<float, 50>  _normal_y_type;
  boost::array<float, 50>  normal_y;

  typedef boost::array<float, 50>  _normal_z_type;
  boost::array<float, 50>  normal_z;


  typedef boost::shared_ptr< ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct foot_sequence
typedef  ::interactive_walk_planner_new::foot_sequence_<std::allocator<void> > foot_sequence;

typedef boost::shared_ptr< ::interactive_walk_planner_new::foot_sequence> foot_sequencePtr;
typedef boost::shared_ptr< ::interactive_walk_planner_new::foot_sequence const> foot_sequenceConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace interactive_walk_planner_new

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ecabddcf87bfd129f951c6d3f6d4047a";
  }

  static const char* value(const  ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xecabddcf87bfd129ULL;
  static const uint64_t static_value2 = 0xf951c6d3f6d4047aULL;
};

template<class ContainerAllocator>
struct DataType< ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> > {
  static const char* value() 
  {
    return "interactive_walk_planner_new/foot_sequence";
  }

  static const char* value(const  ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float32[50] x\n\
float32[50] y\n\
float32[50] theta\n\
float32[50] s\n\
float32[50] height\n\
float32[50] normal_x\n\
float32[50] normal_y\n\
float32[50] normal_z\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.theta);
    stream.next(m.s);
    stream.next(m.height);
    stream.next(m.normal_x);
    stream.next(m.normal_y);
    stream.next(m.normal_z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct foot_sequence_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::interactive_walk_planner_new::foot_sequence_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "theta[]" << std::endl;
    for (size_t i = 0; i < v.theta.size(); ++i)
    {
      s << indent << "  theta[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.theta[i]);
    }
    s << indent << "s[]" << std::endl;
    for (size_t i = 0; i < v.s.size(); ++i)
    {
      s << indent << "  s[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.s[i]);
    }
    s << indent << "height[]" << std::endl;
    for (size_t i = 0; i < v.height.size(); ++i)
    {
      s << indent << "  height[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.height[i]);
    }
    s << indent << "normal_x[]" << std::endl;
    for (size_t i = 0; i < v.normal_x.size(); ++i)
    {
      s << indent << "  normal_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.normal_x[i]);
    }
    s << indent << "normal_y[]" << std::endl;
    for (size_t i = 0; i < v.normal_y.size(); ++i)
    {
      s << indent << "  normal_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.normal_y[i]);
    }
    s << indent << "normal_z[]" << std::endl;
    for (size_t i = 0; i < v.normal_z.size(); ++i)
    {
      s << indent << "  normal_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.normal_z[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // INTERACTIVE_WALK_PLANNER_NEW_MESSAGE_FOOT_SEQUENCE_H

